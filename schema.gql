# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DocList {
  items: [Doc]
  totalItems: Int!
}

type Doc {
  id: ID!
  title: String
  slug: String!
  docType: DocTypeEnum!
  view: DocViewEnum!
  description: String
  blocks: String
  concepts: String
  properties: String
  contentParsed: String
  public: Boolean!
  active: Boolean!
  children(
    skip: Int
    take: Int!

    """Works only with sort by id"""
    after: ID

    """Works only with sort order by id"""
    before: ID
    sort: DocumentSortInput
    filter: DocumentFilterInput
  ): DocumentRelationList
  Parents: [DocumentRelation]
  parent: Doc
  directChildren(
    skip: Int
    take: Int!

    """Works only with sort by id"""
    after: ID

    """Works only with sort order by id"""
    before: ID
    sort: DocumentSortInput
    filter: DocumentFilterInput
  ): DocList
}

enum DocTypeEnum {
  Document
  MainCat
  Course
  Episode
  Book
  Post
  Article
  Chunk
  Page
  video
  photo
  file
  forward
  draft
}

enum DocViewEnum {
  DefaultView
  Series
}

input DocumentSortInput {
  id: SortOrderEnum
  slug: SortOrderEnum
  title: SortOrderEnum
  docType: SortOrderEnum
}

enum SortOrderEnum {
  ASC
  DESC
}

input DocumentFilterInput {
  docType: DocTypeInput
  active: Boolean
  slug: StringOperatorsInput
  title: StringOperatorsInput
  description: StringOperatorsInput
}

input DocTypeInput {
  eq: DocTypeEnum
  notEq: DocTypeEnum
}

input StringOperatorsInput {
  eq: String
  notEq: String
  contains: String
  notContains: String
  in: [String!]
  notIn: [String!]
  regex: String
}

type DocumentRelation {
  id: ID!
  parentDocumentId: ID!
  childDocumentId: ID!
  parentDocument: Doc!
  childDocument: Doc!
  position: BigInt!
  active: Boolean!
  properties: String
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type DocumentRelationList {
  items: [DocumentRelation]
  totalItems: Int!
}

type User {
  id: ID!
  username: String!
  fullName: String
  email: String!
  bio: String
  avatar: String
  publicEmail: String
  address: String
  website: String
  youtube: String
  socialMedia1: String
  socialMedia2: String
  isSuperUser: Boolean!
  status: UserStatusEnum!
  documents(
    skip: Int
    take: Int!

    """Works only with sort by id"""
    after: ID

    """Works only with sort order by id"""
    before: ID
    sort: DocumentSortInput
    filter: DocumentFilterInput
  ): DocList
}

enum UserStatusEnum {
  Active
  Blocked
  Inactive
}

type UserList {
  items: [User!]!
  totalItems: Int!
}

type Query {
  users: UserList!
  user(username: String!): User!
  sayHello: String!
  doc(id: ID!): Doc!
  documents(
    skip: Int
    take: Int!

    """Works only with sort by id"""
    after: ID

    """Works only with sort order by id"""
    before: ID
    sort: DocumentSortInput
    filter: DocumentFilterInput
  ): DocList!
  documentRelation(id: BigInt!): DocumentRelation!
  documentRelations: DocumentRelationList!
}
